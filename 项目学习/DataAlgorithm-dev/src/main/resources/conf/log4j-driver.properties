#控制父类日志记录器的日志级别为info，默认所有模块下只输出info级别以上的日志
log4j.rootCategory=info,console
#单独控制某个模块下的日志级别为error,只有发生异常的时候才输出日志
log4j.logger.log.logProperties=error
#单独控制某个类的日志级别debug,方便输出调试信息
log4j.logger.log.logProperties.LogPropertiesTest=debug

############# 日志输出到控制台 #############
#日志输出到控制台使用的api类
log4j.appender.console=org.apache.log4j.ConsoleAppender  
#指定当前输出源的日志级别，有了前面的配置，就不需要配置该项了
#log4j.appender.console.Threshold = info
#指定日志输出的格式：灵活的格式
log4j.appender.console.layout=org.apache.log4j.PatternLayout

log4j.appender.logfile=org.apache.log4j.rolling.RollingFileAppender
log4j.appender.logfile.rollingPolicy.FileNamePattern=logs/${relType}/${mainClass}-driver-${relType}-%d{yyyyMMddHH}.log
log4j.appender.logfile.rollingPolicy=org.apache.log4j.rolling.TimeBasedRollingPolicy

# 保存编码格式
log4j.appender.logfile.Encoding=UTF-8

# 后缀可以是KB,MB,GB达到该大小后创建新的日志文件
#log4j.appender.logfile.MaxFileSize=10MB
# 设置滚定文件的最大值3 指可以产生root.log.1、root.log.2、root.log.3和root.log四个日志文件
#log4j.appender.logfile.MaxBackupIndex=3  
# 配置logfile为自定义布局模式
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %F %p %m%n
